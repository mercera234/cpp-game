#pragma once
#include <map>
#include <functional>
#include "Actor.h"
#include "MapRoom.h"
#include "FileDirectory.h"
#include "GameData.h"
#include "MegaMap.h"
#include "GameItem.h"
#include "InputManager.h"
#include "Input.h"
#include "EnemyPool.h"

//null resources
const int nullId = -1;
const chtype nullSymbol = 'X' | COLOR_RED_BOLD << TEXTCOLOR_OFFSET;
const std::string nullName = "-";

class ResourceManager
{
private:
	/*Used to assign a new id to a thing. Once assigned, nextId is incremented. */
	int nextId = 0; 

	/*True if input provided matches the actual key pressed.
	False if input is to be abstracted behind a layer of user specific inputs as in a game.*/
	bool useRawInput = false;
public:
	std::map<std::string, Actor> actors;
	std::map<int, MapRoom> mapRooms;
	std::map<std::string, MegaMap> gameMaps;
	std::map<std::string, GameItem> gameItems;
	std::map<std::string, int> idLookup;
	std::map<int, Input> inputs;
	std::map<std::string, EnemyPool> enemyPools;

	GameData theData;
	std::vector<Actor*> playerParty;
	MegaMap* currMap; //the current map that the player is in

	ResourceManager();
	
	Actor& getActor(const std::string& name);
	MegaMap& getMap(const std::string& name);
	MapRoom& getRoom(int id);
	
	int getNextId() { return nextId++; }
	void resetNextId() { nextId = 0; } //needed for unit testing at least

	Actor* getPlayer1();

	/*Load one resource of each type to be used in the absence of other needed resources. 
	These resources are generated by the program and do not live on the hard drive.*/
	void loadNullResources();

	/*Load Maps from separate data files in one directory. Returns the count of MapRooms loaded.*/
	int loadGameMapsFromDir(FileDirectory& dir);

	//setters/getters
	void setUseRawInput(bool useRealInputIn) { useRawInput = useRealInputIn; }
	bool getUseRawInput() { return useRawInput; }
};

